{{define "title"}}{{.Title}}{{end}}

{{define "body"}}
<form id="edit-post-form" action="{{.ActionPath}}" method="post">

  <div style="grid-area:header">
    <h1 style="display:inline; margin-right:1rem;">Edit post</h1>
    <label title="{{.DraftHint}}" for="is-draft">
      <input type="checkbox" {{if .Post.IsDraft}}checked{{end}}
        id="is-draft" name="is-draft" value="is-draft">
      Draft
    </label>
    &ensp;| <a target="_blank" href="{{.Paths.Preview}}{{.Post.Slug}}/">preview</a>
  </div>

  <label for="title" style="grid-area:title">
    <span class="label-text">Title:</span><br />
    <input value="{{.Post.Title}}" type="text" name="title" id="title" required />
  </label>
  <label for="slug" style="grid-area:slug">
    <span class="label-text">Slug:</span><br />
    <span class="hint">
        valid characters: letters, numbers, hyphen, underscore, period, tilde
    </span><br />
    <input value="{{.Post.Slug}}" type="text" name="slug" id="slug" required
        pattern="^[\w\-\.~]+$" />
  </label>

  <div id="attachments-block" style="grid-area:attachments">
    <div id="attachments-block-header">
      <b>Attachments ({{len .Attachments}})</b>
      <a style="float:right;" href="{{.Paths.AttachmentsOfPost .Post.Id}}">Manage</a>
    </div>
    <div id="attachments-block-list">
      {{if not .Attachments}}
      <p style="color: darkgray;">No attachments yet. Click "Manage" to add some!</p>
      {{end}}
      {{range .Attachments}}
      <a title="Click to insert file name into content" onclick="insertAttachmentToContent(event)">{{.Name}}</a>&ensp;
      {{end}}
    </div>
  </div>

  <label id="content-block" for="content" style="grid-area:content;">
    <span class="label-text">Content:</span>
    <span class="hint">
    we use <a tabindex="-1" href="https://djot.net/">djot</a> syntax - here's a
    <a tabindex="-1" href="https://github.com/jgm/djot/blob/main/doc/cheatsheet.md">cheatsheet</a>
    </span>
    <textarea id="content" name="content" style="resize:none;" required>{{.Post.Content}}</textarea>
  </label>

  <div id="preview-block" style="grid-area:preview;">
    <span class="label-text">Live preview:</span>
    <span class="hint">&nbsp;</span>
    <div id="live-preview">
    {{.PostContentHtml}}
    </div>
  </div>

  {{.CsrfTag}}

  <div style="grid-area:submit">
    <input type="submit" value="Save" />
    {{if .Msg}}<span id="msg">{{.Msg}}</span>{{end}}
    {{if .ErrMsg}}<span id="err-msg">Error: {{.ErrMsg}}</span>{{end}}
  </div>
</form>

<style>
form {
  max-width: 100%;
  height: 100%;
  display: grid;
  grid-template-columns: repeat(2, minmax(0, 1fr));
  grid-template-rows: auto auto auto 1fr auto;
  gap: 1rem;
  grid-template-areas:
    "header header"
    "title attachments"
    "slug attachments"
    "content preview"
    "submit submit";
}

#content-block, #preview-block {
  display: flex;
  flex-direction: column;
}
#content-block textarea,
#preview-block #live-preview {
  flex-grow: 1;
}

#live-preview {
  border: 2px solid;
  border-radius: 7px;
  padding: 0.5rem;
  width: 100%;
  overflow-y: auto;
  /* On firefox, without a concrete "height" value, this element will expand
   * vertically beyond the viewport. Setting any height value makes it
   * correctly grow to occupy all available space... for some reason.
   */
  height: 100px;
}
#live-preview h1,
#live-preview h2,
#live-preview h3,
#live-preview h4 {
  margin: 0;
}
#live-preview h1 {
  font-size: 24px;
}
#live-preview h2 {
  font-size: 20px;
}
#live-preview h3 {
  font-size: 18px;
}
#live-preview pre {
  border: 1px solid;
  padding: 0.5rem 0.7rem;
  overflow-x: auto;
}
#live-preview p {
  margin: 0.8rem 0;
}
#live-preview blockquote {
  border-left: 4px solid grey;
  margin: 0 0 0 2rem;
  padding: 0.4rem 0.5rem;
  background-color: gainsboro;
  font-size: 0.9rem;
}
#live-preview blockquote p {
  margin: 0;
}
#live-preview blockquote p + p {
  margin-top: 0.5rem;
}
#live-preview * {
  max-width: 100%;
}
#live-preview img,
#live-preview video {
  max-height: 200px;
}

#attachments-block {
  background-color: #f7f7f7;
  border: 1px solid #ccc;
  display: flex;
  flex-direction: column;
  max-height: 10rem;
}
#attachments-block-header {
  background-color: #eaeaea;
  padding: 0.5rem;
}
#attachments-block-list {
  display: block;
  list-style: none;
  padding: 0.5rem 1rem;
  overflow-y: auto;
  flex-grow: 1;
}
#attachments-block-list a {
  cursor: pointer;
  user-select: none;
}
</style>

<script>
function insertAtCursor(myField, myValue) {
  //IE support
  if (document.selection) {
    myField.focus();
    sel = document.selection.createRange();
    sel.text = myValue;
  }
  //MOZILLA and others
  else if (myField.selectionStart || myField.selectionStart == '0') {
    var startPos = myField.selectionStart;
    var endPos = myField.selectionEnd;
    myField.value = myField.value.substring(0, startPos)
      + myValue
      + myField.value.substring(endPos, myField.value.length);
    myField.selectionStart = startPos + myValue.length;
    myField.selectionEnd = startPos + myValue.length;
  } else {
    myField.value += myValue;
  }
}

function insertAttachmentToContent(e) {
  e.preventDefault();
  var fileName = e.target.innerHTML;
  var inputEl = document.getElementById("content");
  insertAtCursor(inputEl, fileName);
  inputEl.focus();
}


function debounce(callback, wait) {
  let timeoutId = null;
  return (...args) => {
    window.clearTimeout(timeoutId);
    timeoutId = window.setTimeout(() => {
      callback.apply(null, args);
    }, wait);
  };
}


// Live preview: auto update as user types content.
(function (){
  const DJOT_TO_HTML = '{{.Paths.DjotToHtml}}';
  const contentEl = document.querySelector("#content");
  const previewEl = document.querySelector("#live-preview");

  const updateLivePreview = () => {
    fetch(DJOT_TO_HTML, {method: 'POST', body: contentEl.value})
      .then((response) => response.text())
      .then((text) => { previewEl.innerHTML = text; });
  };

  contentEl.addEventListener("keyup", debounce(updateLivePreview, 400));
})();

// Highlight unsaved changes & warn user when they attempt to navigate away or close browser tab.
(function (){
  const titleEl = document.getElementById("title");
  const slugEl = document.getElementById("slug");
  const contentEl = document.getElementById("content");

  const fields = [
    { el: titleEl, originalValue: {{.Post.Title}} },
    { el: slugEl, originalValue: {{.Post.Slug}} },
    { el: contentEl, originalValue: {{.Post.Content}}.replaceAll("\r\n", "\n") },
  ];

  function highlightIfChanged(el, originalValue) {
    if (el.value != originalValue) {
      el.style.backgroundColor = "cornsilk";
    } else {
      el.style.backgroundColor = null;
    }
  }

  // Check and highlight changed field as user types.
  fields.forEach(({el, originalValue}) => {
    el.addEventListener('keyup', () => {
      highlightIfChanged(el, originalValue);
    });

    // On Firefox, when user changes some values, navigates away, then presses Back on their browser, we end up with
    // still dirty field values, but the highlights are gone. Fortunately this script is still executed when user
    // presses Back, so let's manually trigger the highlights here:
    highlightIfChanged(el, originalValue);
  });

  // When user tries to leave (i.e. close tab or navigate away), open a warning prompt
  // if there is any unsaved change.
  function hasChanges() {
    for (const {el, originalValue} of fields) {
      if (el.value != originalValue) {
        return true;
      }
    }
    return false;
  }
  const beforeunloadListener = (e) => {
    if (hasChanges()) {
      e.returnValue = "You have unsaved changes."
    }
  }
  window.addEventListener("beforeunload", beforeunloadListener);

  // Make sure the warning prompt doesn't show when user is trying to submit the form
  const formEl = document.getElementById("edit-post-form");
  formEl.addEventListener('submit', () => {
    window.removeEventListener("beforeunload", beforeunloadListener);
  })

})();
</script>
{{end}}
