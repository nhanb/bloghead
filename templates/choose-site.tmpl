{{define "title"}}Choose site{{end}}

{{define "body"}}
<h1>Choose site</h1>

<p style="max-width: 500px;">
Enter full path of an existing <code>.bloghead</code> file to edit.<br />
If the file does not exist, we'll create a new one.
</p>

<form action="{{.Paths.ChooseSite}}" method="post">
  <label for="full-path">
    <b>Full path:</b><br />
    <input type="text" name="full-path" id="full-path" required
        placeholder="Example: {{.Placeholder}}" value="{{.FullPath}}" />
  </label>

  {{.CsrfTag}}

  <div>
    <input type="submit" value="Submit" />
    {{if .ErrMsg}}<span id="err-msg">Error: {{.ErrMsg}}</span>{{end}}
  </div>
</form>

<script>
// feeling cute, might delete later:
(function cleanupOnPaste(){
    document.getElementById("export-to").addEventListener("paste", function(evt) {
        var value = evt.clipboardData.getData("text");

        // On KDE, ctrl+c a file then ctrl+v into an <input> will paste the
        // full path in this form: file:///home/foo/file.bloghead
        // So let's trim that protocol prefix off.
        // NOTE: if you're on KDE you can explicitly use the "Copy location"
        // right click menu item (Ctrl+Alt+C),
        var prefix = "file://";
        if (value.indexOf(prefix) === 0) {
            evt.preventDefault();
            evt.target.value = value.slice(prefix.length);
        }

        // On Windows 11, there's a "Copy as path" right click menu item, but
        // the pasted value is wrapped in double quotes for some reason.
        if (value[0] === '"' && value[value.length-1] === '"') {
            evt.preventDefault();
            evt.target.value = value.slice(1, value.length-1);
        }
    });
})();
</script>
{{end}}
